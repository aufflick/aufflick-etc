;; Red Hat Linux default .emacs initialization file  ; -*- mode: emacs-lisp -*-

;; Set up the keyboard so the delete key on both the regular keyboard
;; and the keypad delete the character under the cursor and to the right
;; under X, instead of the default, backspace behavior.
(global-set-key [delete] 'delete-char)
(global-set-key [kp-delete] 'delete-char)

;; turn on font-lock mode
(global-font-lock-mode t)
;; enable visual feedback on selections
(setq-default transient-mark-mode t)

;; always end a file with a newline
(setq require-final-newline t)

;; stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)

(when window-system
  ;; enable wheelmouse support by default
  (mwheel-install)
  ;; use extended compound-text coding for X clipboard
  (set-selection-coding-system 'compound-text-with-extensions))

(setq cperl-invalid-face (quote off))

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ansi-color-for-comint-mode t)
 '(browse-url-generic-program "mozilla")
 '(browse-url-netscape-program "/opt/firefox/firefox")
 '(c-tab-always-indent nil)
 '(case-fold-search t)
 '(column-number-mode t)
 '(cperl-clobber-lisp-bindings t)
 '(cperl-electric-keywords t)
 '(cperl-electric-linefeed t)
 '(cperl-electric-parens t)
 '(cperl-font-lock t)
 '(cperl-hairy t)
 '(cperl-indent-level 4)
 '(cperl-indent-parens-as-block t)
 '(cperl-info-on-command-no-prompt t)
 '(cperl-lazy-help-time 3)
 '(cua-mode nil)
 '(erc-autojoin-channels-alist (quote (("appdev02.*" "#AppDev"))))
 '(erc-autojoin-domain-only nil)
 '(erc-interpret-mirc-color t)
 '(erc-modules (quote (completion services smiley tab pcomplete netsplit fill track completion ring button autojoin)))
 '(erc-nick "marka")
 '(erc-prompt-for-password nil)
 '(erc-user-full-name "Mark Aufflick")
 '(flymake-allowed-file-name-masks (quote ((".+\\.c$" flymake-simple-make-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.pm$" flymake-perl-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.comp$" flymake-perl-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.pl$" flymake-perl-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.java$" flymake-simple-make-java-init flymake-simple-java-cleanup flymake-get-real-file-name) (".+[0-9]+\\.tex$" flymake-master-tex-init flymake-master-cleanup flymake-get-real-file-name) (".+\\.tex$" flymake-simple-tex-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.idl$" flymake-simple-make-init flymake-simple-cleanup flymake-get-real-file-name))))
 '(global-font-lock-mode t nil (font-core))
 '(grep-command "find . -name \"*\" |xargs grep -n -e ")
 '(indent-tabs-mode nil)
 '(inhibit-c-tab-always-indent nil)
 '(ispell-dictionary-alist (quote (("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("american" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("brasileiro" "[A-ZÁÉÍÓÚÀÈÌÒÙÃÕÇÜÂÊÔa-záéíóúàèìòùãõçüâêô]" "[^A-ZÁÉÍÓÚÀÈÌÒÙÃÕÇÜÂÊÔa-záéíóúàèìòùãõçüâêô]" "[']" nil ("-d" "brasileiro") nil iso-8859-1) ("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B" "-d" "british") nil iso-8859-1) ("castellano" "[A-ZÁÉÍÑÓÚÜa-záéíñóúü]" "[^A-ZÁÉÍÑÓÚÜa-záéíñóúü]" "[-]" nil ("-B" "-d" "castellano") "~tex" iso-8859-1) ("castellano8" "[A-ZÁÉÍÑÓÚÜa-záéíñóúü]" "[^A-ZÁÉÍÑÓÚÜa-záéíñóúü]" "[-]" nil ("-B" "-d" "castellano") "~latin1" iso-8859-1) ("czech" "[A-Za-zÁÉÌÍÓÚÙİ®©ÈØÏ«Òáéìíóúùı¾¹èøï»ò]" "[^A-Za-zÁÉÌÍÓÚÙİ®©ÈØÏ«Òáéìíóúùı¾¹èøï»ò]" "" nil ("-B" "-d" "czech") nil iso-8859-2) ("dansk" "[A-ZÆØÅa-zæøå]" "[^A-ZÆØÅa-zæøå]" "[']" nil ("-C") nil iso-8859-1) ("deutsch" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("deutsch8" "[a-zA-ZÄÖÜäößü]" "[^a-zA-ZÄÖÜäößü]" "[']" t ("-C" "-d" "deutsch") "~latin1" iso-8859-1) ("english" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("esperanto" "[A-Za-z¦¬¶¼ÆØİŞæøış]" "[^A-Za-z¦¬¶¼ÆØİŞæøış]" "[-']" t ("-C") "~latin3" iso-8859-1) ("esperanto-tex" "[A-Za-z^\\]" "[^A-Za-z^\\]" "[-'`\"]" t ("-C" "-d" "esperanto") "~tex" iso-8859-1) ("francais7" "[A-Za-z]" "[^A-Za-z]" "[`'^---]" t nil nil iso-8859-1) ("francais" "[A-Za-zÀÂÆÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[^A-Za-zÀÂÆÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[-']" t nil "~list" iso-8859-1) ("francais-tex" "[A-Za-zÀÂÆÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü\\]" "[^A-Za-zÀÂÆÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü\\]" "[-'^`\"]" t nil "~tex" iso-8859-1) ("german" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("german8" "[a-zA-ZÄÖÜäößü]" "[^a-zA-ZÄÖÜäößü]" "[']" t ("-C" "-d" "german") "~latin1" iso-8859-1) ("italiano" "[A-ZÀÁÈÉÌÍÒÓÙÚa-zàáèéìíóùú]" "[^A-ZÀÁÈÉÌÍÒÓÙÚa-zàáèéìíóùú]" "[-]" nil ("-B" "-d" "italian") "~tex" iso-8859-1) ("nederlands" "[A-Za-zÀ-ÅÇÈ-ÏÒ-ÖÙ-Üà-åçè-ïñò-öù-ü]" "[^A-Za-zÀ-ÅÇÈ-ÏÒ-ÖÙ-Üà-åçè-ïñò-öù-ü]" "[']" t ("-C") nil iso-8859-1) ("nederlands8" "[A-Za-zÀ-ÅÇÈ-ÏÒ-ÖÙ-Üà-åçè-ïñò-öù-ü]" "[^A-Za-zÀ-ÅÇÈ-ÏÒ-ÖÙ-Üà-åçè-ïñò-öù-ü]" "[']" t ("-C") nil iso-8859-1) ("norsk" "[A-Za-zÅÆÇÈÉÒÔØåæçèéòôø]" "[^A-Za-zÅÆÇÈÉÒÔØåæçèéòôø]" "[\"]" nil ("-d" "norsk") "~list" iso-8859-1) ("norsk7-tex" "[A-Za-z{}\\'^`]" "[^A-Za-z{}\\'^`]" "[\"]" nil ("-d" "norsk") "~plaintex" iso-8859-1) ("polish" "[A-Za-z¡£¦¬¯±³¶¼¿ÆÊÑÓæêñó]" "[^A-Za-z¡£¦¬¯±³¶¼¿ÆÊÑÓæêñó]" "" nil ("-d" "polish") nil iso-8859-2) ("russian" "[áâ÷çäå³öúéêëìíîïğòóôõæèãşûıøùÿüàñÁÂ×ÇÄÅ£ÖÚÉÊËÌÍÎÏĞÒÓÔÕÆÈÃŞÛİØÙßÜÀÑ]" "[^áâ÷çäå³öúéêëìíîïğòóôõæèãşûıøùÿüàñÁÂ×ÇÄÅ£ÖÚÉÊËÌÍÎÏĞÒÓÔÕÆÈÃŞÛİØÙßÜÀÑ]" "" nil ("-d" "russian") nil koi8-r) ("svenska" "[A-Za-zåäöéàüèæøçÅÄÖÉÀÜÈÆØÇ]" "[^A-Za-zåäöéàüèæøçÅÄÖÉÀÜÈÆØÇ]" "[']" nil ("-C") "~list" iso-8859-1) ("portugues" "[a-zA-ZÁÂÉÓàáâéêíóãú]" "[^a-zA-ZÁÂÉÓàáâéêíóãú]" "[']" t ("-C" "-d" "portugues") "~latin1" iso-8859-1) ("slovak" "[A-Za-zÁÄÉÍÓÚÔÀÅ¥İ®©ÈÏ«Òáäéíóúôàåµı¾¹èï»ò]" "[^A-Za-zÁÄÉÍÓÚÔÀÅ¥İ®©ÈÏ«Òáäéíóúôàåµı¾¹èï»ò]" "" nil ("-B" "-d" "slovak") nil iso-8859-2))))
 '(ispell-local-dictionary "british")
 '(ispell-personal-dictionary nil)
 '(message-forward-as-mime nil)
 '(mouse-wheel-follow-mouse t)
 '(mouse-wheel-mode t nil (mwheel))
 '(oacs-base-dir "/web/furfly")
 '(oacs-dbg-severity "debug")
 '(oacs-error-log-dirs (quote ("/web/furfly/manx-dev/log" "/web/oacs-cvs/openacs-HEAD/log" "/var/log/aolserver" "/var/lib/aolserver/pump2/log")))
 '(oacs-postgresql-version "7.4")
 '(ps-n-up-printing 2)
 '(ps-paper-type (quote a4))
 '(ps-printer-name t)
 '(rmail-enable-mime t)
 '(rmail-movemail-program "movemail")
 '(rmail-pop-password "tifnowoo")
 '(rmail-pop-password-required t)
 '(rmail-preserve-inbox nil)
 '(rmail-primary-inbox-list (quote ("po:mark.aufflick" "/var/spool/mail/aufflick")))
 '(rmail-user-mail-address-regexp nil)
 '(save-place t nil (saveplace))
 '(server-switch-hook (quote (raise-frame)))
 '(show-paren-mode t nil (paren))
 '(sql-postgres-options (quote ("-p 5432" "-P" "pager=off")))
 '(sql-postgres-program "/usr/bin/psql")
 '(tab-stop 4 t)
 '(tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64)))
 '(tab-width 4)
 '(tcl-electric-hash-style nil)
 '(tooltip-delay 1.3)
 '(transient-mark-mode t)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(user-full-name "Mark Aufflick")
 '(user-mail-address "mark.aufflick@optusnet.com.au")
 '(vip-re-query-replace t))

; SQL stuff

(defun my-sql-mode-hook ()
	(define-key sql-mode-map "\C-m" 'newline-and-indent)
	(define-key sql-mode-map "\t" 'tab-to-tab-stop)
	(setq indent-line-function 'indent-relative-maybe))
(add-hook 'sql-mode-hook 'my-sql-mode-hook)

;;(defun my-cperl-mode-hook ()
;;	(setq indent-tabs-mode t))
;;(add-hook 'cperl-mode-hook 'my-cperl-mode-hook)

; OpenACS stuff

(defun my-tcl-mode-hook ()
	(define-key tcl-mode-map "\C-m" 'newline-and-indent))
(add-hook 'tcl-mode-hook 'my-tcl-mode-hook)

(setq auto-mode-alist
      (append '(("\\.adp$" . html-mode)
                ("\\.tpl$" . html-mode)
                ("\\.inc$" . php-mode))
              auto-mode-alist))



(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(cperl-hash-face ((t (:background "lightyellow2" :foreground "Red" :weight bold))))
 '(font-lock-string-face ((((class color) (background light)) (:foreground "SaddleBrown"))))
 '(mmm-code-submode-face ((t (:background "AliceBlue"))))
 '(mmm-default-submode-face ((t (:background "AliceBlue")))))

; Perl & Mason stuff
(fset 'perl-mode 'cperl-mode)

(eval-after-load "cperl-mode"
  '(progn
  (define-key cperl-mode-map "\C-m" 'newline-and-indent)))

(defun my-html-mode-hook ()
	(define-key html-mode-map "\C-m" 'newline-and-indent)
	(setq indent-tabs-mode t))
(add-hook 'html-mode-hook 'my-html-mode-hook)

(defun my-rmail-show-message-hook ()
  (goto-address))
(add-hook 'rmail-show-message-hook 'my-rmail-show-message-hook)

(add-hook 'mh-show-mode-hook 'goto-address)
(add-hook 'mh-letter-mode-hook
          (setq flyspell-generic-check-word-p 'mail-mode-flyspell-verify))
(add-hook 'mh-letter-mode-hook 'flyspell-mode)
(add-hook 'mh-letter-mode-hook 'auto-fill-mode)
(setq goto-address-mail-method 'goto-address-send-using-mhe)

(require 'mmm-auto)
(setq mmm-global-mode 'maybe)
(setq auto-mode-alist
      (append '(("\\.mas$" . html-mode)
                ("\\.mhtml$" . html-mode)
                ("\\.html$" . html-mode)
                ("\\.comp$" . html-mode)
                ("\\.inc$" . html-mode)
                ("\\.page$" . html-mode)
                ("\\handler$" . html-mode))
              auto-mode-alist))
(mmm-add-mode-ext-class 'html-mode "\\.mas\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.mhtml\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.html\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.page\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\handler\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.inc\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.comp\\'" 'mason)

(add-to-list 'load-path "/usr/share/emacs/site-lisp/mmm")
(add-to-list 'load-path "/usr/share/emacs/site-lisp/psgml")
(add-to-list 'load-path "/usr/share/emacs/site-lisp/oacs")

;; OACS mode from thecodemill.biz

(autoload 'sgml-mode "psgml" "Major mode to edit SGML files." t)
(autoload 'xml-mode "psgml" "Major mode to edit XML files." t)

;; PSGML configuration
(require 'psgml)
(add-to-list 'auto-mode-alist '("\\.html" . xml-mode))
(add-to-list 'auto-mode-alist '("\\.htm" . xml-mode))
(add-to-list 'auto-mode-alist '("\\.adp" . xml-mode))
(add-to-list 'auto-mode-alist '("\\.xml" . xml-mode))
(add-to-list 'auto-mode-alist '("\\.xql" . xml-mode))
(add-to-list 'sgml-catalog-files "/usr/share/emacs/dtd/catalog")
(setq sgml-markup-faces '((start-tag . font-lock-function-name-face)
                            (end-tag . font-lock-function-name-face)
                              (comment . font-lock-comment-face)
                                (pi . bold)
                                  (sgml . bold)
                                    (doctype . bold)
                                      (entity . font-lock-type-face)
                                        (shortref . font-lock-function-name-face)))
(setq sgml-set-face t)
(setq-default sgml-indent-data t)
(autoload 'sgml-mode "psgml" "Major mode to edit SGML files." t)
(autoload 'xml-mode "psgml" "Major mode to edit XML files." t)
(setq sgml-custom-dtd
      '(("HTML 4.01 Transitional"
	 "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html401/loose.dtd\">")
        ("HTML 4.01 Strict"
	 "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">")
        ("HTML 4.01 Frameset"
	 "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/REC-html40/frameset.dtd\">")
        ("HTML 3.2"
	 "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">")
	("XHTML 1.0 Strict"
	 "<?xml version=\"1.0\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"xhtml1-strict.dtd\">" )
	("XHTML 1.0 Transitional"
	 "<?xml version=\"1.0\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"xhtml1-transitional.dtd\">" )
	("XHTML 1.0 Frameset"
	 "<?xml version=\"1.0\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"xhtml1-frameset.dtd\">" )
	("XQL 1.0"
	 "<?xml version=\"1.0\"?>\n<!DOCTYPE queryset PUBLIC \"-//OpenACS//DTD XQL 1.0//EN\" \"xql.dtd\">" )
        ))

(global-set-key [mouse-3] 'imenu)

;; (require 'bbdb)
;; (bbdb-initialize 'mh-e 'sendmail 'w3 'reportmail)

(ansi-color-for-comint-mode-on)

(require 'oacs)

; gnuserv stuff
(require 'gnuserv-compat)
(autoload 'gnuserv-start "gnuserv-compat"
  "Allow this Emacs process to be a server for client processes."
  t)

 
;(require 'nsd)
;(global-set-key "\C-c\C-t" 'nsd-tail-error)
;(add-to-list 'nsd-error-log-dirs "/web/logs")

(add-to-list 'auto-mode-alist '("\\.rb" . ruby-mode))
; auto set exec bit if shebang
(add-hook 'after-save-hook
          '(lambda ()
             (progn
               (and (save-excursion
                      (save-restriction
                        (widen)
                        (goto-char (point-min))
                        (save-match-data
                          (looking-at "^#!"))))
                    (shell-command (concat "chmod u+x " buffer-file-name))
                    (message (concat "Saved as script: " buffer-file-name))
                    ))))

(autoload 'ruby-mode "ruby-mode" "Ruby editing mode." t)
(add-to-list 'auto-mode-alist '("\.rb$" . ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))
;(require 'ruby-mode)
;(autoload 'ruby-electric "ruby-electric-mode" "Ruby electric mode." t)
(require 'ruby-electric)
(defun ruby-indent ()
  (local-set-key "\C-m" 'ruby-reindent-then-newline-and-indent))
(add-hook 'ruby-mode-hook 'ruby-indent)
; http://www.google.com/url?sa=D&q=http%3A%2F%2Fshylock.uw.hu%2FEmacs%2Fruby-electric.el
(add-hook 'ruby-mode-hook 'ruby-electric-mode)

;(add-hook 'ruby-mode-hook
;  '(lambda()
;  (define-key ruby-mode-map "\C-m" 'newline-and-indent)))


;; eRuby
(require 'mmm-mode)
(setq mmm-global-mode 'maybe)
(setq mmm-submode-decoration-level 2)


(mmm-add-classes
 '((eRuby-code
    :submode ruby-mode
;    :match-face (("<%#" . mmm-comment-submode-face)
	;	 ("<%=" . mmm-output-submode-face)
		; ("<%"	. mmm-code-submode-face))
    :front "<%[#=]?"
    :back  "%>"
    :insert ((?% eRuby-code	  nil @ "<%"  @ " " _ " " @ "%>" @)
	     (?# eRuby-comment	  nil @ "<%#" @ " " _ " " @ "%>" @)
	     (?= eRuby-expression nil @ "<%=" @ " " _ " " @ "%>" @))
    )))
(add-hook 'html-mode-hook
	  (lambda ()
	    (setq mmm-classes '(eRuby-code))
	    (mmm-mode-on)))
(setq auto-mode-alist
      (nconc '(("\\.rhtml$" . html-mode)) auto-mode-alist))

;; (mmm-add-classes
;;  '((ruby-heredoc
;;     :front "<<-\\([a-zA-Z0-9_-]+\\)"
;;     :front-offset (end-of-line 1)
;;     :back "~1$"
;;     :save-matches 1
;;     :submode text-mode
;;     :insert ((?d ruby-heredoc "Here-document Name: " @ "<<" str _ "\n"
;;                  @ "\n" @ str "\n" @))
;;     )))
;; (add-hook 'ruby-mode-hook 
;; 	  (lambda ()
;; 	    (setq mmm-classes '(ruby-heredoc))
;; 	    (mmm-mode-on)))
(add-hook 'ruby-mode-hook 'turn-on-font-lock)




;; (add-to-list 'load-path "~/opt2/share/emacs/site_lisp/erc")
;; (require 'erc)
;; (setq erc-echo-notices-in-minibuffer-flag t)
;; (setq erc-auto-query t)
;; (add-hook 'erc-mode-hook 'erc-add-scroll-to-bottom)
;; (require 'erc-match)
;; (setq erc-keywords '("aufflick" "mark"))
;; (setq erc-prompt (lambda ()
;;      (if (and (boundp 'erc-default-recipients) (erc-default-target))
;;          (erc-propertize (concat (erc-default-target) ">") 'read-only t 'rear-nonsticky t 'front-nonsticky t)
;;        (erc-propertize (concat "ERC>") 'read-only t 'rear-nonsticky t 'front-nonsticky t))))
;; (setq erc-autoaway-use-emacs-idle t)
;; (require 'erc-imenu)
;; (require 'erc-tab)
;; (erc-tab-mode 1)
;; (require 'erc-nickserv)
;; (erc-nickserv-mode 1)
;; (setq erc-prompt-for-nickserv-password nil)
;; (setq erc-nickserv-passwords
;;       '((freenode     (("marka" . "passwd")
;;                        ))
;;         ))

;;(require 'flymake)


(global-set-key "\C-xt" 'perltidy-region)
(setq shell-command-default-error-buffer "perltidy-errors")
(defun perltidy-region ()
  "Run the perltidy parser on the current region."
  (interactive)
  (let ((start (mark))
        (end (point))
        (command "perltidy -i=4 -et=4 -syn -warning-output"))
        (shell-command-on-region start end command t t shell-command-default-error-buffer)))


;;my after-save-hook to cperl
(defun myperl-check-syntax ()
  (interactive)  
  (if (not (equal mode-name "CPerl"))
      ;;ignore
      ()
    ;;get the full path of this file
    (setq source-full-path (buffer-file-name))
    ;;clear the buffer of earlier error
    (set-buffer (get-buffer-create "perlsyn"))
    (erase-buffer)
    ;;set the perl5lib
    (setenv "PERL5LIB" "/home/aufflick/opt/lib/perl5/site_perl:/home/sips-ng/lib:/home/sips-ng/web_app/lib")
    ;;execute perl -wc
    (call-process "perl" nil "perlsyn" nil "-wc" source-full-path)
    ;;execute podchecker
;;    (call-process "podchecker" nil "perlsyn" nil 
;;                                                source-full-path)
    ;; checks if perl returned a syntax OK string
    (if (not (equal (substring (buffer-string) -3 -1) "OK"))
    (switch-to-buffer "perlsyn")))
  )

(add-hook 'after-save-hook 'myperl-check-syntax)

; Graphviz
(autoload 'graphviz-dot-mode "graphviz-dot-mode" "Major mode to edit GraphViz dot files." t)
(add-to-list 'auto-mode-alist '("\\.dot" . graphviz-dot-mode))
