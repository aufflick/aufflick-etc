;; Mark Aufflick's .emacs initialization file  ; -*- mode: emacs-lisp -*-

;; $Id$

;; choose which of my optional sections to use
(setq aufflick-xterm nil)
(setq aufflick-gnuserv t)
(setq aufflick-erc nil)
(setq aufflick-ruby t)
(setq aufflick-use-tabs nil)

;; some often-changed settings
(setq sql-postgres-options (quote ("-P" "pager=off")))
(setq sql-postgres-program "/opt/local/bin/psql")

(add-to-list 'load-path "/opt/share/emacs/site-lisp")
(add-to-list 'load-path "/opt/share/emacs/site-lisp/mmm")
;;(add-to-list 'load-path "/usr/share/emacs/site-lisp/psgml")
(add-to-list 'load-path "/opt/share/emacs/site-lisp/oacs")

;; nxml mode
(add-to-list 'load-path "/opt/share/emacs/site-lisp/nxml")
(setq auto-mode-alist
        (cons '("\\.\\(xml\\|xsl\\|rng\\|xhtml\\\)\\'" . nxml-mode)
	      auto-mode-alist))

;;
;; Some generic stuff -- based on an old RedHat config
;;

(global-set-key [delete] 'delete-char)
(global-set-key [kp-delete] 'delete-char)

(global-font-lock-mode t)

;; enable visual feedback on selections
(setq-default transient-mark-mode t)

;; always end a file with a newline
(setq require-final-newline t)

;; stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)

(when window-system
  ;; enable wheelmouse support by default
  (mwheel-install)
  ;; use extended compound-text coding for X clipboard
  (set-selection-coding-system 'compound-text-with-extensions))

;;
;; end generic RedHat slurp
;;

;; tabs vs spaces - some people get picky about this ;)

(setq indent-tabs-mode 
      (if aufflick-use-tabs t nil))

;;
;; auto-gen custom variables
;;

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ansi-color-for-comint-mode t)
 '(browse-url-generic-program "mozilla" t)
 '(browse-url-netscape-program "/opt/firefox/firefox")
 '(browse-url-new-window-flag t t)
 '(c-default-style (quote ((java-mode . "java") (other . "bsd"))))
 '(c-tab-always-indent t)
 '(case-fold-search t)
 '(column-number-mode t)
 '(cperl-clobber-lisp-bindings t)
 '(cperl-electric-keywords t)
 '(cperl-electric-linefeed t)
 '(cperl-electric-parens t)
 '(cperl-font-lock t)
 '(cperl-hairy t)
 '(cperl-indent-level 4)
 '(cperl-indent-parens-as-block t)
 '(cperl-info-on-command-no-prompt t)
 '(cperl-lazy-help-time 3)
 '(cua-mode nil nil (cua-base))
 '(erc-autojoin-channels-alist (quote (("appdev02.*" "#AppDev"))))
 '(erc-autojoin-domain-only nil)
 '(erc-interpret-mirc-color t)
 '(erc-modules (quote (completion services smiley tab pcomplete netsplit fill track completion ring button autojoin)))
 '(erc-nick "marka")
 '(erc-prompt-for-password nil)
 '(erc-user-full-name "Mark Aufflick")
 '(flymake-allowed-file-name-masks (quote ((".+\\.c$" flymake-simple-make-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.pm$" flymake-perl-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.comp$" flymake-perl-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.pl$" flymake-perl-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.java$" flymake-simple-make-java-init flymake-simple-java-cleanup flymake-get-real-file-name) (".+[0-9]+\\.tex$" flymake-master-tex-init flymake-master-cleanup flymake-get-real-file-name) (".+\\.tex$" flymake-simple-tex-init flymake-simple-cleanup flymake-get-real-file-name) (".+\\.idl$" flymake-simple-make-init flymake-simple-cleanup flymake-get-real-file-name))))
 '(global-font-lock-mode t nil (font-core))
 '(grep-command "find . -name \"*\" |xargs grep -n -e ")
 '(inhibit-c-tab-always-indent nil)
 '(inhibit-startup-message t)
 '(ispell-dictionary-alist (quote (("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("american" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("brasileiro" "[A-ZÁÉÍÓÚÀÈÌÒÙÃÕÇÜÂÊÔa-záéíóúàèìòùãõçüâêô]" "[^A-ZÁÉÍÓÚÀÈÌÒÙÃÕÇÜÂÊÔa-záéíóúàèìòùãõçüâêô]" "[']" nil ("-d" "brasileiro") nil iso-8859-1) ("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B" "-d" "british") nil iso-8859-1) ("castellano" "[A-ZÁÉÍÑÓÚÜa-záéíñóúü]" "[^A-ZÁÉÍÑÓÚÜa-záéíñóúü]" "[-]" nil ("-B" "-d" "castellano") "~tex" iso-8859-1) ("castellano8" "[A-ZÁÉÍÑÓÚÜa-záéíñóúü]" "[^A-ZÁÉÍÑÓÚÜa-záéíñóúü]" "[-]" nil ("-B" "-d" "castellano") "~latin1" iso-8859-1) ("czech" "[A-Za-zÁÉÌÍÓÚÙİ®©ÈØÏ«Òáéìíóúùı¾¹èøï»ò]" "[^A-Za-zÁÉÌÍÓÚÙİ®©ÈØÏ«Òáéìíóúùı¾¹èøï»ò]" "" nil ("-B" "-d" "czech") nil iso-8859-2) ("dansk" "[A-ZÆØÅa-zæøå]" "[^A-ZÆØÅa-zæøå]" "[']" nil ("-C") nil iso-8859-1) ("deutsch" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("deutsch8" "[a-zA-ZÄÖÜäößü]" "[^a-zA-ZÄÖÜäößü]" "[']" t ("-C" "-d" "deutsch") "~latin1" iso-8859-1) ("english" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("esperanto" "[A-Za-z¦¬¶¼ÆØİŞæøış]" "[^A-Za-z¦¬¶¼ÆØİŞæøış]" "[-']" t ("-C") "~latin3" iso-8859-1) ("esperanto-tex" "[A-Za-z^\\]" "[^A-Za-z^\\]" "[-'`\"]" t ("-C" "-d" "esperanto") "~tex" iso-8859-1) ("francais7" "[A-Za-z]" "[^A-Za-z]" "[`'^---]" t nil nil iso-8859-1) ("francais" "[A-Za-zÀÂÆÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[^A-Za-zÀÂÆÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]" "[-']" t nil "~list" iso-8859-1) ("francais-tex" "[A-Za-zÀÂÆÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü\\]" "[^A-Za-zÀÂÆÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü\\]" "[-'^`\"]" t nil "~tex" iso-8859-1) ("german" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("german8" "[a-zA-ZÄÖÜäößü]" "[^a-zA-ZÄÖÜäößü]" "[']" t ("-C" "-d" "german") "~latin1" iso-8859-1) ("italiano" "[A-ZÀÁÈÉÌÍÒÓÙÚa-zàáèéìíóùú]" "[^A-ZÀÁÈÉÌÍÒÓÙÚa-zàáèéìíóùú]" "[-]" nil ("-B" "-d" "italian") "~tex" iso-8859-1) ("nederlands" "[A-Za-zÀ-ÅÇÈ-ÏÒ-ÖÙ-Üà-åçè-ïñò-öù-ü]" "[^A-Za-zÀ-ÅÇÈ-ÏÒ-ÖÙ-Üà-åçè-ïñò-öù-ü]" "[']" t ("-C") nil iso-8859-1) ("nederlands8" "[A-Za-zÀ-ÅÇÈ-ÏÒ-ÖÙ-Üà-åçè-ïñò-öù-ü]" "[^A-Za-zÀ-ÅÇÈ-ÏÒ-ÖÙ-Üà-åçè-ïñò-öù-ü]" "[']" t ("-C") nil iso-8859-1) ("norsk" "[A-Za-zÅÆÇÈÉÒÔØåæçèéòôø]" "[^A-Za-zÅÆÇÈÉÒÔØåæçèéòôø]" "[\"]" nil ("-d" "norsk") "~list" iso-8859-1) ("norsk7-tex" "[A-Za-z{}\\'^`]" "[^A-Za-z{}\\'^`]" "[\"]" nil ("-d" "norsk") "~plaintex" iso-8859-1) ("polish" "[A-Za-z¡£¦¬¯±³¶¼¿ÆÊÑÓæêñó]" "[^A-Za-z¡£¦¬¯±³¶¼¿ÆÊÑÓæêñó]" "" nil ("-d" "polish") nil iso-8859-2) ("russian" "[áâ÷çäå³öúéêëìíîïğòóôõæèãşûıøùÿüàñÁÂ×ÇÄÅ£ÖÚÉÊËÌÍÎÏĞÒÓÔÕÆÈÃŞÛİØÙßÜÀÑ]" "[^áâ÷çäå³öúéêëìíîïğòóôõæèãşûıøùÿüàñÁÂ×ÇÄÅ£ÖÚÉÊËÌÍÎÏĞÒÓÔÕÆÈÃŞÛİØÙßÜÀÑ]" "" nil ("-d" "russian") nil koi8-r) ("svenska" "[A-Za-zåäöéàüèæøçÅÄÖÉÀÜÈÆØÇ]" "[^A-Za-zåäöéàüèæøçÅÄÖÉÀÜÈÆØÇ]" "[']" nil ("-C") "~list" iso-8859-1) ("portugues" "[a-zA-ZÁÂÉÓàáâéêíóãú]" "[^a-zA-ZÁÂÉÓàáâéêíóãú]" "[']" t ("-C" "-d" "portugues") "~latin1" iso-8859-1) ("slovak" "[A-Za-zÁÄÉÍÓÚÔÀÅ¥İ®©ÈÏ«Òáäéíóúôàåµı¾¹èï»ò]" "[^A-Za-zÁÄÉÍÓÚÔÀÅ¥İ®©ÈÏ«Òáäéíóúôàåµı¾¹èï»ò]" "" nil ("-B" "-d" "slovak") nil iso-8859-2))) t)
 '(ispell-local-dictionary "british")
 '(ispell-personal-dictionary nil)
 '(ispell-program-name "/opt/local/bin/aspell")
 '(message-forward-as-mime nil)
 '(mouse-wheel-follow-mouse t)
 '(mouse-wheel-mode t nil (mwheel))
 '(oacs-base-dir "/web/wikiquiz")
 '(oacs-dbg-severity "debug")
 '(oacs-error-log-dirs (quote ("/web/wikiquiz/log" "/web/photo2/log")))
 '(oacs-postgresql-version "8.1")
 '(oacs-preferred-xml-mode "nxml")
 '(ps-n-up-printing 2)
 '(ps-paper-type (quote a4))
 '(ps-printer-name t)
 '(rmail-enable-mime t)
 '(rmail-movemail-program "movemail")
 '(rmail-pop-password "tifnowoo")
 '(rmail-pop-password-required t)
 '(rmail-preserve-inbox nil)
 '(rmail-primary-inbox-list (quote ("po:mark.aufflick" "/var/spool/mail/aufflick")))
 '(rmail-user-mail-address-regexp nil)
 '(save-place t nil (saveplace))
 '(server-switch-hook (quote (raise-frame)))
 '(show-paren-mode t)
 '(spell-command "/opt/local/bin/aspell")
 '(tab-stop 4 t)
 '(tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64)))
 '(tab-width 4)
 '(tcl-electric-hash-style nil)
 '(tooltip-delay 1.3)
 '(transient-mark-mode t)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(user-full-name "Mark Aufflick")
 '(user-mail-address "mark@pumptheory.com")
 '(vip-re-query-replace t))

										; SQL stuff

(defun my-sql-mode-hook ()
  (define-key sql-mode-map "\C-m" 'newline-and-indent)
  (define-key sql-mode-map "\t" 'tab-to-tab-stop)
  (setq indent-tabs-mode nil)
  (setq indent-line-function 'indent-relative-maybe))
(add-hook 'sql-mode-hook 'my-sql-mode-hook)

(require 'osx-osascript)


(setq cperl-invalid-face (quote off))

(defun my-cperl-mode-hook ()
  (setq indent-tabs-mode t))
(add-hook 'cperl-mode-hook 'my-cperl-mode-hook)

;; OpenACS stuff

(defun my-tcl-mode-hook ()
  (define-key tcl-mode-map "\C-m" 'newline-and-indent))
(add-hook 'tcl-mode-hook 'my-tcl-mode-hook)

(setq auto-mode-alist
      (append '(
                ("\\.tpl$" . html-mode)
				)
              auto-mode-alist))



(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(cperl-hash-face ((t (:background "lightyellow2" :foreground "Red" :weight bold))))
 '(font-lock-string-face ((((class color) (background light)) (:foreground "SaddleBrown"))))
 '(mmm-code-submode-face ((t (:background "AliceBlue"))))
 '(mmm-default-submode-face ((t (:background "AliceBlue")))))

										; Perl & Mason stuff
(fset 'perl-mode 'cperl-mode)

(eval-after-load "cperl-mode"
  '(progn
	 (define-key cperl-mode-map "\C-m" 'newline-and-indent)))

(defun my-html-mode-hook ()
  (define-key html-mode-map "\C-m" 'newline-and-indent)
  (setq indent-tabs-mode t))
(add-hook 'html-mode-hook 'my-html-mode-hook)

(defun my-rmail-show-message-hook ()
  (goto-address))
(add-hook 'rmail-show-message-hook 'my-rmail-show-message-hook)

(add-hook 'mh-show-mode-hook 'goto-address)
(add-hook 'mh-letter-mode-hook
          (setq flyspell-generic-check-word-p 'mail-mode-flyspell-verify))
(add-hook 'mh-letter-mode-hook 'flyspell-mode)
(add-hook 'mh-letter-mode-hook 'auto-fill-mode)
(setq goto-address-mail-method 'goto-address-send-using-mhe)

(require 'mmm-auto)
(setq mmm-global-mode 'maybe)
(setq auto-mode-alist
      (append '(("\\.mas$" . html-mode)
                ("\\.mhtml$" . html-mode)
                ("\\.html$" . html-mode)
                ("\\.comp$" . html-mode)
                ("\\.inc$" . html-mode)
                ("\\.page$" . html-mode)
                ("\\handler$" . html-mode))
              auto-mode-alist))
(mmm-add-mode-ext-class 'html-mode "\\.mas\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.mhtml\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.html\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.page\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\handler\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.inc\\'" 'mason)
(mmm-add-mode-ext-class 'html-mode "\\.comp\\'" 'mason)

;; OACS mode from thecodemill.biz
(add-to-list 'auto-mode-alist '("\\.vuh" . tcl-mode))
(require 'oacs)


(global-set-key [mouse-3] 'imenu)

;; (require 'bbdb)
;; (bbdb-initialize 'mh-e 'sendmail 'w3 'reportmail)

(ansi-color-for-comint-mode-on)

										;(require 'oacs)

										; gnuserv stuff
(if aufflick-gnuserv
	(progn
	  (require 'gnuserv-compat)
	  (autoload 'gnuserv-start "gnuserv-compat"
		"Allow this Emacs process to be a server for client processes."
		t)
	  )
  )

 
										;(require 'nsd)
										;(global-set-key "\C-c\C-t" 'nsd-tail-error)
										;(add-to-list 'nsd-error-log-dirs "/web/logs")

(if aufflick-erc
	(progn
	  (add-to-list 'load-path "~/opt2/share/emacs/site_lisp/erc")
	  (require 'erc)
	  (setq erc-echo-notices-in-minibuffer-flag t)
	  (setq erc-auto-query t)
	  (add-hook 'erc-mode-hook 'erc-add-scroll-to-bottom)
	  (require 'erc-match)
	  (setq erc-keywords '("aufflick" "mark"))
	  (setq erc-prompt (lambda ()
						 (if (and (boundp 'erc-default-recipients) (erc-default-target))
							 (erc-propertize (concat (erc-default-target) ">") 'read-only t 'rear-nonsticky t 'front-nonsticky t)
						   (erc-propertize (concat "ERC>") 'read-only t 'rear-nonsticky t 'front-nonsticky t))))
	  (setq erc-autoaway-use-emacs-idle t)
	  (require 'erc-imenu)
	  (require 'erc-tab)
	  (erc-tab-mode 1)
	  (require 'erc-nickserv)
	  (erc-nickserv-mode 1)
	  (setq erc-prompt-for-nickserv-password nil)
	  (setq erc-nickserv-passwords
			'((freenode     (("marka" . "passwd")
							 ))
			  ))
	  ))

(if aufflick-ruby
	(progn

	  (add-to-list 'auto-mode-alist '("\\.rb" . ruby-mode))

	  ;; auto set exec bit if shebang
	  (add-hook 'after-save-hook
				'(lambda ()
				   (progn
					 (and (save-excursion
							(save-restriction
							  (widen)
							  (goto-char (point-min))
							  (save-match-data
								(looking-at "^#!"))))
						  (shell-command (concat "chmod u+x " buffer-file-name))
						  (message (concat "Saved as script: " buffer-file-name))
						  ))))

	  (autoload 'run-ruby "inf-ruby"
		"Run an inferior Ruby process")
	  (autoload 'inf-ruby-keys "inf-ruby"
		"Set local key defs for inf-ruby in ruby-mode")
	  (add-hook 'ruby-mode-hook
				'(lambda ()
				   (inf-ruby-keys)
				   ))

	  (autoload 'ruby-mode "ruby-mode" "Ruby editing mode." t)
	  (add-to-list 'auto-mode-alist '("\.rb$" . ruby-mode))
	  (add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))
										;(require 'ruby-mode)
										;(autoload 'ruby-electric "ruby-electric-mode" "Ruby electric mode." t)
	  (require 'ruby-electric)
	  (defun ruby-indent ()
		(local-set-key "\C-m" 'ruby-reindent-then-newline-and-indent))
	  (add-hook 'ruby-mode-hook 'ruby-indent)
										; http://www.google.com/url?sa=D&q=http%3A%2F%2Fshylock.uw.hu%2FEmacs%2Fruby-electric.el
	  (add-hook 'ruby-mode-hook 'ruby-electric-mode)
				   
	  (add-hook 'ruby-mode-hook
				'(lambda()
				   (define-key ruby-mode-map "\C-m" 'newline-and-indent)))


	  ;; eRuby
	  (require 'mmm-mode)
	  (setq mmm-global-mode 'maybe)
	  (setq mmm-submode-decoration-level 2)

	  (mmm-add-classes
	   '((erb-code
		  :submode ruby-mode
		  :match-face (("<%#" . mmm-comment-submode-face)
					   ("<%=" . mmm-output-submode-face)
					   ("<%"  . mmm-code-submode-face))
		  :front "<%[#=]?" 
		  :back "%>" 
		  :insert ((?% erb-code       nil @ "<%"  @ " " _ " " @ "%>" @)
				   (?# erb-comment    nil @ "<%#" @ " " _ " " @ "%>" @)
				   (?= erb-expression nil @ "<%=" @ " " _ " " @ "%>" @))
		  )))
	  (add-hook 'html-mode-hook
				(lambda ()
				  (setq mmm-classes '(erb-code))
				  (mmm-mode-on)))
	  (add-to-list 'auto-mode-alist '("\\.rhtml$" . html-mode))


;; 	  (mmm-add-classes
;; 	   '((eRuby-code
;; 		  :submode ruby-mode
;; 										;    :match-face (("<%#" . mmm-comment-submode-face)
;; 										;	 ("<%=" . mmm-output-submode-face)
;; 										; ("<%"	. mmm-code-submode-face))
;; 		  :front "<%[#=]?"
;; 		  :back  "%>"
;; 		  :insert ((?% eRuby-code	  nil @ "<%"  @ " " _ " " @ "%>" @)
;; 				   (?# eRuby-comment	  nil @ "<%#" @ " " _ " " @ "%>" @)
;; 				   (?= eRuby-expression nil @ "<%=" @ " " _ " " @ "%>" @))
;; 		  )))
;; 										; need to figure out how this can co-exist with mason
;; 	  (add-hook 'html-mode-hook
;; 				(lambda ()
;; 				  (setq mmm-classes '(eRuby-code))
;; 				  (mmm-mode-on)))

;; 	  (add-to-list 'auto-mode-alist '("\\.rhtml$" . html-mode))
;; 	  (add-to-list 'mmm-mode-ext-classes-alist '(html-mode nil eruby))

;; 	  (mmm-add-classes
;; 	   '((ruby-heredoc
;; 		  :front "<<-\\([a-zA-Z0-9_-]+\\)"
;; 		  :front-offset (end-of-line 1)
;; 		  :back "~1$"
;; 		  :save-matches 1
;; 		  :submode text-mode
;; 		  :insert ((?d ruby-heredoc "Here-document Name: " @ "<<" str _ "\n"
;; 					   @ "\n" @ str "\n" @))
;; 		  )))
;; 	  (add-hook 'ruby-mode-hook 
;; 				(lambda ()
;; 				  (setq mmm-classes '(ruby-heredoc))
;; 				  (mmm-mode-on)))

(defun ri (ruby-class-name)
  "*lookup a class in ri and put it into a buffer (or switch to a previous identical search)."
  (interactive "sClass: ")
  (let* ((explicit-shell-file-name "ri")
		 (explicit-ri-args '("-T" "-f" "ansi"))
		 (rishell-buffer-name (concat "*ri " ruby-class-name "*")))
		 (if (not (get-buffer rishell-buffer-name))
			 (progn
			   (setq ansi-color-for-comint-mode t)
			   (add-to-list 'explicit-ri-args ruby-class-name)
			   (shell)
			   (rename-buffer rishell-buffer-name)
			   ))
		 (pop-to-buffer (get-buffer rishell-buffer-name))
		 (setq buffer-read-only t)
		 (setq buffer-modified-p nil)
		 (goto-line '1)
		 ))
  
  
  ))


;;(require 'flymake)


(global-set-key "\C-xt" 'perltidy-region)
(setq shell-command-default-error-buffer "perltidy-errors")
(defun perltidy-region ()
  "Run the perltidy parser on the current region."
  (interactive)
  (let ((start (mark))
        (end (point))
        (command "perltidy -i=4 -et=4 -syn -warning-output"))
	(shell-command-on-region start end command t t shell-command-default-error-buffer)))

(fset 'oie-insert-display-row-template
	  [?\C-a tab ?< ?& ?  ?/ ?d ?i ?s ?p ?l ?a ?y ?_ ?r ?o ?w ?. ?i ?n ?c ?, ? ?c ?e ?l ?l ?s ?  ?= ?> ?   ?[ return tab ?  ?  ?  ?  ?[ ?  ?  ?] ?, return ?[ ?  ?  ?] ?, return backspace ?] ?  ?& ?>])
(global-set-key "\M-or" 'oie-insert-display-row-template)

;;my after-save-hook to cperl
(defun myperl-check-syntax ()
  (interactive)  
  (if (not (equal mode-name "CPerl"))
      ;;ignore
      ()
    ;;get the full path of this file
    (setq source-full-path (buffer-file-name))
    ;;clear the buffer of earlier error
    (set-buffer (get-buffer-create "perlsyn"))
    (erase-buffer)
    ;;set the perl5lib
    (setenv "PERL5LIB" "/home/sites/quadtec.com.au/perl_lib")
    ;;execute perl -wc
    (call-process "/opt/local/bin/perl" nil "perlsyn" nil "-wc" source-full-path)
    ;;execute podchecker
	;;    (call-process "podchecker" nil "perlsyn" nil 
	;;                                                source-full-path)
    ;; checks if perl returned a syntax OK string
    (if (not (equal (substring (buffer-string) -3 -1) "OK"))
		(switch-to-buffer "perlsyn")))
  )

(add-hook 'after-save-hook 'myperl-check-syntax)

										; Graphviz
(autoload 'graphviz-dot-mode "graphviz-dot-mode" "Major mode to edit GraphViz dot files." t)
(add-to-list 'auto-mode-alist '("\\.dot" . graphviz-dot-mode))


(if  aufflick-xterm
	(progn
	  (xterm-mouse-mode)
	  (mwheel-install)


	  (defcustom mwheel-scroll-amount '(5 . 1)
		"Amount to scroll windows by when spinning the mouse wheel.
This is actually a cons cell, where the first item is the amount to scroll
on a normal wheel event, and the second is the amount to scroll when the
wheel is moved with the shift key depressed.
This should be the number of lines to scroll, or `nil' for near
full screen.
A near full screen is `next-screen-context-lines' less than a full screen."
		:group 'mouse
		:type '(cons
				(choice :tag "Normal"
						(const :tag "Full screen" :value nil)
						(integer :tag "Specific # of lines"))
				(choice :tag "Shifted"
						(const :tag "Full screen" :value nil)
						(integer :tag "Specific # of lines"))))

	  (defcustom mwheel-follow-mouse t
		"Whether the mouse wheel should scroll the window that the mouse is over.
This can be slightly disconcerting, but some people may prefer it."
		:group 'mouse
		:type 'boolean)

	  (defun mwheel-scroll (event)
		(interactive "e")
		(let ((curwin (if mwheel-follow-mouse
						  (prog1
							  (selected-window)
							(select-window (mwheel-event-window event)))))
			  (amt (if (memq 'shift (event-modifiers event))
					   (cdr mwheel-scroll-amount)
					 (car mwheel-scroll-amount))))
		  (case (mwheel-event-button event)
			(mouse-4 (scroll-down amt))
			(mouse-5 (scroll-up amt))
			(otherwise (error "Bad binding in mwheel-scroll")))
		  (if curwin (select-window curwin))))
	  )									; end if aufflick-xterm
  )

(if (eq window-system 'x)
	(progn
	  (defun paste-to-osx (text &optional push)
		(progn
		  (let ((process-connection-type nil)) ; use pipe
			(let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
			  (process-send-string proc text)
			  (process-send-eof proc)))))

	  (setq interprogram-cut-function 'paste-to-osx)))
